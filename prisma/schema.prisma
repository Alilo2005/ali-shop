generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  cartItems CartItem[]
  wishlistItems WishlistItem[]
  addresses Address[]
  store     Store?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Product Management
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  slug        String    @unique
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  shortDescription String?
  sku          String   @unique
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  costPrice    Decimal? @db.Decimal(10, 2)
  trackQuantity Boolean @default(true)
  quantity     Int      @default(0)
  lowStockThreshold Int @default(10)
  weight       Decimal? @db.Decimal(8, 2)
  status       ProductStatus @default(DRAFT)
  featured     Boolean  @default(false)
  slug         String   @unique
  metaTitle    String?
  metaDescription String?
  images       String[]
  tags         String[]
  
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  storeId      String?
  store        Store?   @relation(fields: [storeId], references: [id])
  
  variants     ProductVariant[]
  reviews      Review[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  wishlistItems WishlistItem[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  name      String
  sku       String  @unique
  price     Decimal @db.Decimal(10, 2)
  quantity  Int     @default(0)
  image     String?
  
  // Variant attributes (size, color, etc.)
  attributes Json
  
  cartItems  CartItem[]
  orderItems OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variants")
}

// Store Management (Multi-vendor support)
model Store {
  id          String @id @default(cuid())
  name        String
  description String?
  image       String?
  slug        String @unique
  
  ownerId     String @unique
  owner       User   @relation(fields: [ownerId], references: [id])
  
  products    Product[]
  orders      Order[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("stores")
}

// Order Management
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  discount        Decimal     @default(0) @db.Decimal(10, 2)
  
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  storeId         String?
  store           Store?      @relation(fields: [storeId], references: [id])
  
  shippingAddress Json
  billingAddress  Json?
  
  items           OrderItem[]
  payments        Payment[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  
  createdAt DateTime @default(now())

  @@map("order_items")
}

// Cart Management
model CartItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  
  quantity  Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

// Wishlist Management
model WishlistItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Payment Management
model Payment {
  id            String        @id @default(cuid())
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  
  stripePaymentIntentId String?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

// Reviews and Ratings
model Review {
  id        String @id @default(cuid())
  rating    Int
  title     String?
  comment   String @db.Text
  
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  helpful   Int    @default(0)
  verified  Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}

// Address Management
model Address {
  id          String @id @default(cuid())
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        AddressType @default(SHIPPING)
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  
  isDefault   Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

// Enums
enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  CRYPTO
}

enum AddressType {
  BILLING
  SHIPPING
}
